{"version":3,"file":"index.mjs","sources":["../../i18n.ts","../../useTranslatedText.ts","../../adapters/basicAdapters.ts","../../adapters/nextAdapters.ts","../../index.ts"],"sourcesContent":["import i18n from \"i18next\";\nimport \"intl-pluralrules\";\n\n// Tipo per l'adapter di inizializzazione i18n\nexport type I18nInitializer = (\n  resources: Record<string, object>,\n  options?: Partial<I18nInitOptions>\n) => void;\n\n// Opzioni di configurazione per l'inizializzazione\nexport interface I18nInitOptions {\n  defaultLanguage?: string;\n  fallbackLanguage?: string | string[];\n  debug?: boolean;\n  interpolation?: {\n    escapeValue?: boolean;\n    [key: string]: any;\n  };\n  detection?: {\n    order?: string[];\n    lookupLocalStorage?: string;\n    caches?: string[];\n    [key: string]: any;\n  };\n  backend?: {\n    loadPath?: string;\n    addPath?: string;\n    [key: string]: any;\n  };\n  [key: string]: any;\n}\n\n// Funzione di inizializzazione predefinita\nlet i18nInitializer: I18nInitializer = (resources, options = {}) => {\n  console.log(\"Inizializzatore i18n predefinito in uso. Considera di impostarne uno personalizzato.\");\n  const lngs = Object.keys(resources);\n  const defaultLng = options.defaultLanguage || lngs[0];\n  const fallbackLng = options.fallbackLanguage || { default: lngs };\n        const { initReactI18next } = require('react-i18next');\n  \n  i18n.use(initReactI18next).init({\n    lng: defaultLng,\n    resources: Object.entries(resources).reduce(\n      (prev, [key, val]) => ({ ...prev, [key]: val }),\n      {}\n    ),\n    interpolation: {\n      escapeValue: false,\n      ...options.interpolation,\n    },\n    supportedLngs: lngs,\n    fallbackLng,\n    debug: options.debug || false,\n    detection: options.detection,\n    backend: options.backend,\n    ...options,\n  });\n\n  return i18n;\n};\n\n/**\n * Configura un inizializzatore personalizzato per i18n\n * @param initializer - Funzione personalizzata per inizializzare i18n\n */\nexport const setI18nInitializer = (initializer: I18nInitializer): void => {\n  i18nInitializer = initializer;\n};\n\n/**\n * Inizializza i18n con le risorse di traduzione e opzioni personalizzate\n * @param resources - Dizionario delle risorse di traduzione per lingua\n * @param options - Opzioni di configurazione\n * @returns L'istanza i18n inizializzata\n */\nconst initializeI18n = (\n  resources: Record<string, object>,\n  options: Partial<I18nInitOptions> = {}\n) => {\n  return i18nInitializer(resources, options);\n};\n\nexport default initializeI18n;\n","import { useCallback } from \"react\";\nimport type { TOptions } from \"i18next\";\n\n// Tipo per la funzione di traduzione\nexport type TranslationFunction = (key: string, options?: TOptions) => string;\n\n// Configurazione globale per il traduttore\nexport interface TranslationAdapter {\n  getTranslator: (namespace?: string) => { translate: TranslationFunction };\n  name?: string; // Nome dell'adapter, utile per debug\n}\n\n// Adapter predefinito per react-i18next\nlet translationAdapter: TranslationAdapter = {\n  getTranslator: (namespace?: string) => {\n    try {\n      // Import dinamico per evitare problemi in ambiente server\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const { useTranslation } = require(\"react-i18next\");\n      const { t } = useTranslation(namespace);\n      return { translate: t };\n    } catch (error) {\n      // Fallback nel caso react-i18next non sia disponibile\n      console.warn(\n        \"react-i18next non disponibile, usando traduzione di fallback\"\n      );\n      return {\n        translate: (key: string) => key,\n      };\n    }\n  },\n  name: \"base\",\n};\n\n/**\n * Imposta un adapter personalizzato per le traduzioni\n * @param adapter - Adapter personalizzato che fornisce il traduttore\n */\nexport const setTranslationAdapter = (adapter: TranslationAdapter): void => {\n  translationAdapter = adapter;\n};\n\n/**\n * Hook per tradurre testi che si adatta al sistema di traduzione configurato\n * @param ns - Namespace opzionale per le traduzioni\n * @returns Un oggetto con la funzione traslateText\n */\nexport const useTranslatedText = (ns?: string) => {\n  const { translate } = translationAdapter.getTranslator(ns);\n\n  const traslateText = useCallback(\n    (text: string, options?: TOptions) => {\n      if (!text) return \"\";\n      return translate(text, options);\n    },\n    [translate, ns]\n  );\n\n  return { traslateText };\n};\n","import { TranslationAdapter } from '../useTranslatedText';\nimport i18n from 'i18next';\n\n/**\n * Crea un adapter per i18next che funziona sia lato client che server\n * @param instance - Opzionale: istanza i18n da utilizzare\n * @returns L'adapter configurato\n */\nexport const createI18nextAdapter = (instance: typeof i18n = i18n): TranslationAdapter => {\n  return {\n    getTranslator: (namespace?: string) => {\n      return {\n        translate: (key, options) => {\n          const ns = namespace || 'common';\n          try {\n            return instance.t(key, { ...options, ns });\n          } catch (error) {\n            console.warn(`Translation key not found: ${key} in namespace: ${ns}`);\n            return key;\n          }\n        }\n      };\n    }\n  };\n};\n\n/**\n * Crea un adapter per react-i18next (ambiente React)\n */\nexport const createReactI18nextAdapter = (): TranslationAdapter => {\n  return {\n    getTranslator: (namespace?: string) => {\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const { useTranslation } = require('react-i18next');\n        const { t } = useTranslation(namespace);\n        return { translate: t };\n      } catch (error) {\n        console.warn('react-i18next non disponibile, usando fallback');\n        return { translate: (key) => key };\n      }\n    }\n  };\n};\n\n/**\n * Crea un adapter che utilizza un dizionario statico di traduzioni\n * @param translations - Dizionario delle traduzioni per namespace\n */\nexport const createStaticAdapter = (\n  translations: Record<string, Record<string, string>>\n): TranslationAdapter => {\n  return {\n    getTranslator: (namespace?: string) => {\n      const ns = namespace || 'common';\n      return {\n        translate: (key, options) => {\n          const nsTranslations = translations[ns] || {};\n          const translation = nsTranslations[key];\n          \n          if (!translation) {\n            return key;\n          }\n          \n          // Sostituzione dei parametri\n          if (options) {\n            return Object.entries(options).reduce(\n              (acc, [paramKey, paramValue]) => \n                acc.replace(new RegExp(`{{${paramKey}}}`, 'g'), String(paramValue)),\n              translation\n            );\n          }\n          \n          return translation;\n        }\n      };\n    }\n  };\n};\n","\nimport { TranslationAdapter } from \"../useTranslatedText\";\n\n/**\n * Crea un adapter per next-intl\n * Funziona solo in ambiente Next.js con next-intl installato\n */\nexport const createNextIntlAdapter = (): TranslationAdapter => {\n  return {\n    getTranslator: (namespace?: string) => {\n      try {\n        // Tentativo di importare next-intl\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const nextIntl = require(\"next-intl\");\n        const useTranslations = nextIntl.useTranslations;\n\n        try {\n          const t = useTranslations(namespace || \"\");\n\n          return {\n            translate: (key, options) => {\n              try {\n                return t(key, options as Record<string, any>);\n              } catch (error) {\n                console.warn(`Translation key not found: ${key}`);\n                return key;\n              }\n            },\n          };\n        } catch (error) {\n          // Errore nell'usare useTranslations\n          console.warn(\"Errore nell'utilizzare useTranslations di next-intl\", error);\n          return { translate: (key) => key };\n        }\n      } catch (error) {\n        // next-intl non è installato\n        console.warn(\n          \"next-intl non è installato, usando traduzione di fallback\"\n        );\n        return { translate: (key) => key };\n      }\n    },\n    name: \"intl\",\n  };\n};\n\n/**\n * Crea un adapter per next-i18next\n * Funziona solo in ambiente Next.js con next-i18next installato\n\nexport const createNextI18nextAdapter = (): TranslationAdapter => {\n  return {\n    getTranslator: (namespace?: string) => {\n      try {\n        // Tentativo di importare next-i18next\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const { useTranslation } = require(\"next-i18next\");\n        const { t } = useTranslation(namespace || \"common\");\n\n        return { translate: t };\n      } catch (error) {\n        // next-i18next non è installato\n        console.warn(\n          \"next-i18next non è installato, usando traduzione di fallback\"\n        );\n        return { translate: (key) => key };\n      }\n    },\n  };\n}; */\n","import initializeI18n, { setI18nInitializer, I18nInitOptions } from './i18n';\nimport { useTranslatedText, setTranslationAdapter, TranslationAdapter, TranslationFunction } from './useTranslatedText';\nimport { createI18nextAdapter, createReactI18nextAdapter, createStaticAdapter } from './adapters/basicAdapters';\nimport { createNextIntlAdapter } from './adapters/nextAdapters';\n\n// Esportazioni principali\nexport {\n  initializeI18n,\n  setI18nInitializer,\n  useTranslatedText,\n  setTranslationAdapter,\n};\n\n// Esportazioni dei tipi\nexport type {\n  I18nInitOptions,\n  TranslationAdapter,\n  TranslationFunction,\n};\n\n// Esportazioni degli adapter predefiniti\nexport const adapters = {\n  i18next: createI18nextAdapter,\n  reactI18next: createReactI18nextAdapter,\n  static: createStaticAdapter,\n  nextIntl: createNextIntlAdapter,\n  //nextI18next: createNextI18nextAdapter,\n};\n"],"names":["i18nInitializer","resources","options","console","log","lngs","Object","keys","defaultLng","defaultLanguage","fallbackLng","fallbackLanguage","default","initReactI18next","require","i18n","use","init","assign","lng","entries","reduce","prev","key","val","interpolation","escapeValue","supportedLngs","debug","detection","backend","setI18nInitializer","initializer","initializeI18n","translationAdapter","getTranslator","namespace","useTranslation","t","translate","error","warn","name","setTranslationAdapter","adapter","useTranslatedText","ns","$","_c","t0","t1","text","traslateText","t2","createI18nextAdapter","instance","createReactI18nextAdapter","createStaticAdapter","translations","nsTranslations","translation","acc","paramKey","paramValue","replace","RegExp","String","createNextIntlAdapter","nextIntl","useTranslations","adapters","i18next","reactI18next","static"],"mappings":"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"}